name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'

jobs:
  validate-version:
    name: Validate Semantic Versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from version.go
        id: extract_version
        run: |
          VERSION=$(grep -E "Version = \"[0-9\.]+\"" version/version.go | sed -E 's/.*Version = "([0-9\.]+)".*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Validate semantic versioning format
        run: |
          if ! echo "$VERSION" | grep -qE '^[0-9]+(\.[0-9]+){2}(-(alpha|beta|rc)[0-9]*)?$'; then
            echo "Error: Version $VERSION does not follow semantic versioning (MAJOR.MINOR.PATCH)"
            echo "Please update version/version.go with a valid semantic version"
            exit 1
          fi
          echo "Version $VERSION is valid"

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
          cache: true

      - name: Fix go.mod and verify dependencies
        run: |
          # Fix go.mod file format issues
          sed -i 's/go 1.23.0/go 1.23/' go.mod
          sed -i '/toolchain go1.24.2/d' go.mod
          # Now verify dependencies
          go mod verify

      - name: Build
        run: go build -v ./...

      - name: Install dependencies for coverage analysis
        run: sudo apt-get install -y bc
        
      - name: Run unit tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          
          # Check if coverage is below threshold
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "::warning::Test coverage is below 70% (Current: $COVERAGE%)"
          else
            echo "::notice::Test coverage is at or above 70% (Current: $COVERAGE%)"
          fi
      
      - name: Generate HTML coverage report
        run: go tool cover -html=coverage.out -o coverage.html
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

      - name: Run Nancy for dependency scanning
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -m all | nancy sleuth